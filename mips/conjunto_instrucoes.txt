d- 32 registradores de 32 bits

- programa em c -
f = (g + h) - (i + j);

- mesmo programa em mips -
add $t0, $s1, $s2   -> adicionar valor s1 e s2 em t0
add $t1, $s3, $s4   -> adicionar valor s3 e s4 em t1
add $s0, $t0, $t1   -> subtrair t0, t1 e adicionar em s0


- conjunto de instrucao load
movimenta dados da memoria para o registrador
leitura de dados da memoria

- conjunto de instrucao store
movimenta dados do registrador para a memoria
escrita na memoria

- conjunto de instrucao move
passar conteudo de um registrador para outro registrador
nao envolve a memoria ram
envolve somente a cpu, pois mexe com registradores

- ambiente de programacao
ide mars .jar

- comandos li $v0
servem para imprimir ou ler um determinado tipo de dado
li $v0, 1	-> imprimir inteiro
li $v0, 2       -> imprimir float
li $v0, 3       -> imprimir double
li $v0, 4       -> imprimir string ou char

li $v0, 5       -> ler inteiro
li $v0, 6       -> ler float
li $v0, 7       -> ler double
li $v0, 8       -> ler string ou char
li $v0, 10       -> encerrar programa principal

- adicione valores a registradores com li
li $registrador, valor

- adicione valores a registradores com addi
addi $registrador, $zero, valor		# $zero = 0

- adicao de inteiros
add	-> somar registradores
add $t0, $t1, $t2	# registrador t0, t1, t2  -> somar t1 com t2 e colocar em t0

addi	-> adicionar valor em um unico registrador e este sera resultado de outro registrador
addi $t0, $t1, 15	# 15 sera adicionado no registrador $t1 e sera colocado por fim no registrador $t0, serve como uma soma $t1 + 15

- subtracao de inteiros
sub	-> instrucao para subtrair
sub $t0, $t1, $t2	# t0 = t1 - t2
subi $t0, $t1, 15	# t0 = t1 - 15

- multiplicacao de inteiros
mul $s0, $t0, $t1	# s0 = t0 * t1

- mover bits ou potencializar valores
|-- shift / left --|
sll $t0, $t1, n		# faz shift left de t1 n casas para a esquerda e adiciona em t0

|-- shift / right --|
srl $s0, $t0, n		# faz shitf right de t0 n casas a direita e adiciona em s0

- dividir inteiros
div $t0, $t1		# realiza divisao inteira de t0 por t1
			# parte inteira vai para lo
			# resto da divisao vai para hi
mflo $s0		# move conteudo de lo para s0
mfhi $s1		# move conteudo de hi para s1


